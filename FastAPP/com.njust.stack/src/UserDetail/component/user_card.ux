<template>
	<div class="user-container">
    <div class="content-up">
      <div class="content-left">
        <image class="icon" src={{userinfos.postericon}}></image>
      </div>
      <div class="content-right">
        <div class="usercard-bottom">
            <div class="usercard-bottom-item">
              <text class="item-key">{{userinfos.posts}}</text>
              <text class="item-mount">Posts</text>
            </div>
            <div class="usercard-bottom-item" onclick="clickToFollowInfo">
              <text class="item-key">{{userinfos.followers}}</text>
              <text class="item-mount">Followers</text>
            </div>
            <div class="usercard-bottom-item" onclick="clickToFollowInfo">
              <text class="item-key">{{userinfos.following}}</text>
              <text class="item-mount">Following</text>
            </div>
        </div>
        <a class="a_item" if="{{userinfos.followed}}" onclick="clickToUnfollow">Unfollow</a>
        <a class="b_item" else  onclick="clickToFollow">Follow</a>
      </div>
    </div>
    <div class="content-down">
        <a class="username">{{userinfos.username}}</a>
        <a class="name">{{userinfos.name}}</a>
        <a class="email">{{userinfos.email}}</a>		
        <a class="bio">{{userinfos.bio}}</a>		
    </div>
	</div>
</template>

<style>
	.user-container {
		flex-direction: column;
	}

	.content-up {
    height: 280px;
    width: 100%;
    indicator-color: rgba(0,0,0,0.2);
    indicator-selected-color: #ffffff;
	}

	.content-left {
	}

	.icon {
		width: 200px;
		height: 200px;
		object-fit: cover;
		border-radius: 100px;
		/* considering */
		border-color: #dc143c;
		border-width: 5px;
		margin: 40px 40px 0px 40px;
  }
  
  .content-right {
    flex-direction: column;
    width: 430px;
    margin-right: 40px;
  }

  .usercard-bottom {
    margin-top: 55px;
    margin-bottom: 10px;
    height: 100px;
    width: 100%;
    justify-content: space-between;
    align-items: center;
  }

  .usercard-bottom-item {
    flex-direction: column;
    align-items: center;
    width: 33.3%;
  }
  
  .item-key {
    font-size: 35px;
    text-align: center;
    color: black;
    font-weight: bold;
  }

  .item-mount {
    color: gray;
    font-size: 25px;
    text-align: center;
    
  }

  .a_item {
    text-align: center;
    background-color: rgba(0, 0, 0, 0);
    height: 60px;
    width: 100%;
    border-radius: 8.3px;
		border-color: #bdbaba;
		border-width: 2px;
    padding: 20px 20px;
    font-size: 35px;
    color: #000000;
    lines: 1;
  }

  .b_item {
    text-align: center;
    background-color: #3399ff;
    height: 60px;
    width: 100%;
    border-radius: 8.3px;
		/* border-color: #fffff0;
		border-width: 2px; */
    padding: 20px 20px;
    font-size: 35px;
    color: #ffffff;
    lines: 1;
  }

	.content-down {
    margin-top: 5px;
    margin-left: 40px;
		/* height: 150px; */
		flex-direction: column;
		border-bottom-color: #F2F2F2;
		border-bottom-width: 1px;
		justify-content: center;
	}

	.username {
		color: black;
		font-weight: bold;
	}

	.name {
		color: gray;
	}

	.email {
		color: rgb(5, 5, 155);
  }

	.bio {
		color: gray;
  }

	.likedata {
		color: black;
	}
</style>

<script>
	import router from '@system.router';
  import prompt from '@system.prompt'
	import fetch from '@system.fetch'

	export default {
		data: {
			props: [
				'userinfos',
			]
		},
		press(item) {
			console.error("on press event param : " + item);
		},
    like: function () {
      this.liked = !this.liked;
      prompt.showToast({ message: this.liked === true ? 'like' : 'dislike', image: '/Common/logo.png' });
    },
		routePage(url) {
			//跳转到应用内的某个页面
			// router.push({
			// 	uri: "/Page_Hearingdetail"
			// })
		},
    post: function (url, data) {
      return new Promise((resolve, reject) => {
        fetch.fetch({
          url: url,
          data: data,
          responseType: 'json',
          method: 'post',
          success: function (data) {
            console.log("post success");
            resolve(data);
          },
          fail: function (errmsg, errcode) {
            console.log("post fail");
            reject(errcode, errmsg);
          }
        });  
      })
    },
    clickToFollow() {
      this.userinfos.followed = !this.userinfos.followed;
      this.userinfos.followers += 1;
      var date = new Date();
      var ftime = date.getFullYear()+"-"+(date.getMonth()+1)+"-"+date.getDate()+" "+date.getHours()+":"+date.getMinutes()+":"+date.getSeconds();
      var promise = this.post("http://114.116.248.233:12345/follow/follow_user", {"phonenum":"18260071012", "followee":this.userinfos.phonenum, "ftime":ftime});
    },
    clickToUnfollow() {
      this.userinfos.followed = !this.userinfos.followed;
      this.userinfos.followers -= 1;
      var promise = this.post("http://114.116.248.233:12345/follow/unfollow_user", {"phonenum":"18260071012", "followee":this.userinfos.phonenum});
    },
    clickToFollowInfo() {
        router.push({ 
          uri: '/FollowInfo',
          params: {phonenum: this.userinfos.phonenum}
        });
    }
	}
</script>